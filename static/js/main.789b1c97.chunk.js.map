{"version":3,"sources":["redux/contacts/contactsAction.js","redux/contacts/contactsReducer.js","redux/auth/authActions.js","redux/auth/authReducers.js","redux/store.js","redux/auth/authOperations.js","redux/View/LoginView.js","redux/View/RegisterView.js","redux/auth/authSelectors.js","components/Navigation/Navigation.js","redux/contacts/contactsOperation.js","components/ContactForm/ContactForm.js","redux/contacts/contactsSelectors.js","components/ContactList/ContactList.js","App.js","components/UserMenu/UserMenu.js","components/userMenuBar/userMenuBar.js","PrivateRoute.js","PublicRoute.js","AppB.js","index.js"],"names":["addTaskRequest","createAction","nameResult","numberResult","name","number","addTaskSuccess","addTaskError","getFetchRequest","getFetchSuccess","getFetchError","removeContactRequest","removeContactSuccess","removeContactError","nameCheck","contactsTools","createReducer","contactsAction","state","action","payload","filter","contact","id","loading","filterTools","combineReducers","contacts","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","authActions","_","token","error","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","contactsReducer","auth","persistReducer","authReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","axios","defaults","baseURL","headers","common","Authorization","registration","credentials","dispatch","post","then","response","data","console","log","catch","logIn","logout","getCurrentUser","getState","persistedToken","get","LoginView","password","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onLogin","this","className","onSubmit","type","onChange","Component","connect","authOperations","RegisterView","onRegister","isAuthenticated","authSelectors","to","addTask","disPatch","fetchContacts","removeContact","delete","ContactForm","onAddTask","mapDispatchToProps","contactsOperation","getFilter","getLoadingTasks","getVisible","createSelector","task","toLowerCase","includes","onRemove","onVisible","contactsSelectors","component","map","visibleTask","classNames","timeout","onClick","App","onFetchContacts","isLoadingTasks","avatar","onLogout","src","alt","width","isAuthinticated","routeProps","render","restricted","AppB","path","exact","Contacts","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.789b1c97.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addTaskRequest = createAction(\r\n  'contacts/request',\r\n  (nameResult, numberResult) => ({\r\n    name: nameResult,\r\n    number: numberResult,\r\n  }),\r\n);\r\nconst addTaskSuccess = createAction('contacts/success');\r\nconst addTaskError = createAction('contacts/error');\r\n\r\nconst getFetchRequest = createAction('contacts/getFetchRequest');\r\nconst getFetchSuccess = createAction('contacts/getFetchSuccess');\r\nconst getFetchError = createAction('contacts/getFetchError');\r\n\r\nconst removeContactRequest = createAction('contacts/removeContactRequest');\r\nconst removeContactSuccess = createAction('contacts/removeContactSuccess');\r\nconst removeContactError = createAction('contacts/removeContactError');\r\n\r\n// const removeTask = createAction('contacts/remove');\r\n\r\nconst nameCheck = createAction('contacts/check');\r\n\r\nexport default {\r\n  addTaskRequest,\r\n  addTaskSuccess,\r\n  addTaskError,\r\n\r\n  getFetchRequest,\r\n  getFetchSuccess,\r\n  getFetchError,\r\n\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n\r\n  // removeTask,\r\n  nameCheck,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsAction from './contactsAction';\r\n// import contactsOperation from './contactsOperation';\r\n\r\nconst contactsTools = createReducer([], {\r\n  [contactsAction.addTaskSuccess]: (state, action) => [\r\n    ...state,\r\n    action.payload,\r\n  ],\r\n  [contactsAction.getFetchSuccess]: (state, action) => action.payload,\r\n  [contactsAction.removeContactSuccess]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsAction.addTaskRequest]: () => true,\r\n  [contactsAction.addTaskSuccess]: () => false,\r\n  [contactsAction.addTaskError]: () => false,\r\n});\r\n\r\nconst filterTools = createReducer('', {\r\n  [contactsAction.nameCheck]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts: contactsTools,\r\n  filter: filterTools,\r\n  loading: loading,\r\n});\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './authActions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: (_, { payload }) => payload,\r\n  [authActions.loginError]: (_, { payload }) => payload,\r\n  [authActions.logoutError]: (_, { payload }) => payload,\r\n  [authActions.getCurrentUserError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  token,\r\n  error,\r\n});\r\n","// import { combineReducers } from 'redux';\r\nimport contactsReducer from './contacts/contactsReducer';\r\nimport authReducers from './auth/authReducers';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n  PAUSE,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    auth: persistReducer(authPersistConfig, authReducers),\r\n  },\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\n","import axios from 'axios';\r\nimport authActions from './authActions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset(token) {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst registration = credentials => dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  axios\r\n    .post('/users/signup', credentials)\r\n    .then(response => {\r\n      token.set(response.data.token);\r\n      console.log(response);\r\n      dispatch(authActions.registerSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(authActions.registerError(error)));\r\n};\r\n\r\nconst logIn = credentials => dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  axios\r\n    .post('/users/login', credentials)\r\n    .then(response => {\r\n      token.set(response.data.token);\r\n      console.log(response);\r\n\r\n      dispatch(authActions.loginSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(authActions.loginError(error)));\r\n};\r\n\r\nconst getCurrentUser = () => (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  axios\r\n    .get('users/current')\r\n    .then(({ data }) => dispatch(authActions.getCurrentUserSuccess(data)))\r\n    .catch(error => authActions.getCurrentUserError(error));\r\n};\r\n\r\nconst logout = () => dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  axios\r\n    .post('/users/logout')\r\n    .then(() => {\r\n      token.unset();\r\n      dispatch(authActions.logoutSuccess());\r\n    })\r\n    .catch(error => dispatch(authActions.logoutError(error)));\r\n};\r\n\r\nexport default { registration, logIn, logout, getCurrentUser };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../auth/authOperations';\r\nimport './LoginView.css';\r\n\r\nclass LoginView extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onLogin({ ...this.state });\r\n    this.setState({ email: '', password: '' });\r\n  };\r\n\r\n  render() {\r\n    const { email, password } = this.state;\r\n\r\n    return (\r\n      <div className=\"login-form\">\r\n        <h1 className=\"login-header_description\">Login Page</h1>\r\n\r\n        <form className=\"origin-form-style\" onSubmit={this.handleSubmit}>\r\n          <div className=\"login-form_style\">\r\n            <p className=\"login-form_description\">name</p>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={this.handleChange}\r\n            ></input>\r\n            <p className=\"login-form_description\">password</p>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n            ></input>\r\n          </div>\r\n          <button className=\"login-button\" type=\"submit\">\r\n            Log In\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { onLogin: authOperations.logIn })(LoginView);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../auth/authOperations';\r\nimport './RegisterView.css';\r\n\r\nclass RegisterView extends Component {\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onRegister({ ...this.state });\r\n    this.setState({ name: '', email: '', password: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, email, password } = this.state;\r\n\r\n    return (\r\n      <div className=\"register-form\">\r\n        <h1 className=\"register-header_description\">Register Page</h1>\r\n\r\n        <form\r\n          className=\"origin-form_style-register\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <div className=\"register-form_style\">\r\n            <p className=\"register-form_description\">Name</p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n            ></input>\r\n            <p className=\"register-form_description\">Email</p>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={this.handleChange}\r\n            ></input>\r\n\r\n            <p className=\"register-form_description\">Password</p>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n            ></input>\r\n          </div>\r\n\r\n          <button className=\"register-button\" type=\"submit\">\r\n            registration\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { onRegister: authOperations.registration })(\r\n  RegisterView,\r\n);\r\n","const isAuthenticated = state => state.auth.token;\r\nconst getUserName = state => state.auth.user.name;\r\n\r\nexport default { isAuthenticated, getUserName };\r\n","import React from 'react';\r\nimport authSelectors from '../../redux/auth/authSelectors';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({ isAuthenticated }) => (\r\n  <div className=\"phonebook\">\r\n    <h2 className=\"phonebook phonebook-head\">Phonebook</h2>\r\n    <div className=\"container-list\">\r\n      <ul className=\"container-list_ul\">\r\n        {!isAuthenticated && (\r\n          <li className=\"nav-li\">\r\n            <NavLink to=\"/registration\" className=\"nav-ul\">\r\n              Registration\r\n            </NavLink>\r\n          </li>\r\n        )}\r\n        {!isAuthenticated && (\r\n          <li className=\"nav-li\">\r\n            <NavLink to=\"/login\" className=\"nav-ul\">\r\n              Login\r\n            </NavLink>\r\n          </li>\r\n        )}\r\n\r\n        {isAuthenticated && (\r\n          <li className=\"nav-li\">\r\n            <NavLink to=\"/contacts\" className=\"nav-ul\"></NavLink>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.isAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","import contactsAction from './contactsAction';\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  // unset(token) {\r\n  //   axios.defaults.headers.common.Authorization = '';\r\n  // },\r\n};\r\n\r\nconst addTask = (name, number) => (disPatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  disPatch(contactsAction.addTaskRequest());\r\n  axios\r\n    .post('/contacts', {\r\n      name,\r\n      number,\r\n    })\r\n    .then(response => {\r\n      // token.set(response.data.token);\r\n      disPatch(contactsAction.addTaskSuccess(response.data));\r\n    })\r\n    .catch(error => disPatch(contactsAction.addTaskError(error)));\r\n};\r\n\r\nconst fetchContacts = () => (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(contactsAction.getFetchRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => {\r\n      dispatch(contactsAction.getFetchSuccess(data));\r\n    })\r\n    .catch(error => dispatch(contactsAction.getFetchError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsAction.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsAction.removeContactSuccess(id)))\r\n    .catch(error => dispatch(contactsAction.removeContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addTask,\r\n  fetchContacts,\r\n  removeContact,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsAction from '../../redux/contacts/contactsAction';\r\nimport './ContactForm.css';\r\nimport contactsOperation from '../../redux/contacts/contactsOperation';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAddTask(this.state.name, this.state.number);\r\n\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contact-form\">\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"contact-form_style\">\r\n            <p className=\"contact-form_description\">Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n              className=\"contact-form_label\"\r\n            ></input>\r\n            <p className=\"contact-form_description\">Number</p>\r\n            <input\r\n              onChange={this.handleChange}\r\n              value={this.state.number}\r\n              name=\"number\"\r\n            ></input>\r\n          </div>\r\n\r\n          <button type=\"submit\" className=\"contact-form_button\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddTask: contactsOperation.addTask,\r\n  handleChange: contactsAction.nameCheck,\r\n};\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoadingTasks = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getContacts = state => state.contacts.contacts;\r\n\r\nconst getVisible = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(task => task.name.toLowerCase().includes(filter));\r\n  },\r\n);\r\n// const getVisible = state => {\r\n//   const contacts = getContacts(state);\r\n//   const filter = getFilter(state).toLowerCase();\r\n\r\n//   return contacts.filter(task => task.name.toLowerCase().includes(filter));\r\n// };\r\n\r\nexport default {\r\n  getLoadingTasks,\r\n  getFilter,\r\n  getVisible,\r\n};\r\n","import React from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport contactsAction from '../../redux/contacts/contactsAction';\r\nimport contactsOperation from '../../redux/contacts/contactsOperation';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nimport './ContactList.css';\r\n\r\nconst Contacts = ({ value, onChange, onVisible, onRemove }) => (\r\n  <div className=\"find-input\">\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        onChange={e => onChange(e.target.value)}\r\n        value={value}\r\n        name=\"filter\"\r\n      ></input>\r\n    </label>\r\n    <TransitionGroup component=\"ul\">\r\n      {onVisible.map(visibleTask => (\r\n        <CSSTransition key={visibleTask.id} classNames=\"list\" timeout={250}>\r\n          <li className=\"name-list\">\r\n            {visibleTask.name}:{visibleTask.number}\r\n            <button\r\n              type=\"button\"\r\n              className=\"close-button\"\r\n              onClick={() => onRemove(visibleTask.id)}\r\n            >\r\n              delete\r\n            </button>\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  onVisible: contactsSelectors.getVisible(state),\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onRemove: contactsOperation.removeContact,\r\n  onChange: contactsAction.nameCheck,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactList/ContactList';\n// import { CSSTransition } from 'react-transition-group';\nimport './App.css';\nimport contactsOperation from './redux/contacts/contactsOperation';\nimport contactsSelectors from './redux/contacts/contactsSelectors';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    return (\n      <div>\n        <ContactForm />\n        <h2 className=\"contacts-styles\">Contacts</h2>\n\n        <ContactsList />\n        {this.props.isLoadingTasks && <h1 className=\"loading\">Loading</h1>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingTasks: contactsSelectors.getLoadingTasks(state),\n});\n\nconst mapDispatchToProps = {\n  onFetchContacts: contactsOperation.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\r\nimport authSelectors from '../../redux/auth/authSelectors';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../../redux/auth/authOperations';\r\n\r\nimport './UserMenu.css';\r\nconst UserMenu = ({ avatar, name, onLogout }) => (\r\n  <div className=\"user-menu\">\r\n    <img src={avatar} alt=\"avatar\" width=\"32\"></img>\r\n    <span>Welcome, {name}</span>\r\n    <button className=\"logout_button\" type=\"button\" onClick={onLogout}>\r\n      Logout\r\n    </button>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  name: authSelectors.getUserName(state),\r\n  avatar:\r\n    'https://www.leadcreation.com.au/wp-content/uploads/2018/11/multicultural-icon-24.jpg.png',\r\n});\r\n\r\nexport default connect(mapStateToProps, { onLogout: authOperations.logout })(\r\n  UserMenu,\r\n);\r\n","import React from 'react';\r\nimport authSelectors from '../../redux/auth/authSelectors';\r\nimport { connect } from 'react-redux';\r\nimport UserMenu from '../UserMenu/UserMenu';\r\n\r\nconst userMenuBar = ({ isAuthinticated }) => (\r\n  <div>{isAuthinticated && <UserMenu />}</div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthinticated: authSelectors.isAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(userMenuBar);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from './redux/auth/authSelectors';\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to=\"/login\" />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.isAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from './redux/auth/authSelectors';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  restricted,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && restricted ? (\r\n        <Redirect to=\"/contacts\" />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.isAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import LoginView from './redux/View/LoginView';\r\nimport RegisterView from './redux/View/RegisterView';\r\nimport React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Contacts from './App';\r\nimport UserMenuBar from './components/userMenuBar/userMenuBar';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport PublicRoute from './PublicRoute';\r\nimport authSelectors from './redux/auth/authSelectors';\r\n\r\nconst AppB = () => (\r\n  <div>\r\n    <Navigation />\r\n    <UserMenuBar />\r\n    <Switch>\r\n      <PrivateRoute path=\"/contacts\" exact component={Contacts} />\r\n      {/* <Route path=\"/contacts\" exact component={Contacts}></Route> */}\r\n      <PublicRoute\r\n        path=\"/registration\"\r\n        component={RegisterView}\r\n        restricted={false}\r\n      ></PublicRoute>\r\n      <PublicRoute\r\n        path=\"/login\"\r\n        component={LoginView}\r\n        restricted={true}\r\n      ></PublicRoute>\r\n    </Switch>\r\n  </div>\r\n);\r\n\r\nexport default AppB;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport AppB from './AppB';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <AppB />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}